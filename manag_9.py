import os
import json
import base64
import requests
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# ------------------ ุฅุนุฏุงุฏุงุช ------------------
TOKEN = os.getenv("TOKEN_MANAGER") 
PORT = int(os.getenv("PORT") or 10000)
WEBHOOK_URL = os.getenv("WEBHOOK_URL") or f"https://telegram-manager9-bot.onrender.com/{TOKEN}"

# GitHub config
GH_TOKEN = os.getenv("GH_TOKEN")  # ุชููู GitHub (ูุฌุจ ุฅุถุงูุชู ููุชุบูุฑ ุจูุฆุฉ)
GH_REPO = os.getenv("GH_REPO") or "OMRANOMO/telegram-manager9-bot"  # ูุซุงู: "OMRANOMO/telegram-manager9-bot"
GH_BRANCH = os.getenv("GH_BRANCH") or "main"
GH_FILE_PATH = os.getenv("GH_FILE_PATH") or "test_status.json"

# Raw URL (ุจุฏูู ูููุฑุงุกุฉ ุฏูู ูุตุงุฏูุฉ ุฅุฐุง ุงููุณุชูุฏุน ุนุงู)
GH_RAW_URL = os.getenv("GH_RAW_URL") or f"https://raw.githubusercontent.com/OMRANOMO/telegram-manager9-bot/refs/heads/main/test_status.json"

# ------------------ ุดุฌุฑุฉ ุงูุงุฎุชุจุงุฑุงุช (ูุทุงุจูุฉ ูุจูุช ุงูุงุฎุชุจุงุฑุงุช) ------------------
# ุชูุณุชุฎุฏู ูุฐู ุงูุดุฌุฑุฉ ูุจูุงุก ููุญุฉ ุงูุชุญูู ูุฃุฒุฑุงุฑ ุงูุชุจุฏูู
QUIZ_TREE = {
    "ุงูููุฏุณุฉ": {
        "ุงููุญุฏุฉ ุงูุฃููู": [
            ("ุงุฎุชุจุงุฑ ุฎูุงุต ุงูุชูุงุณุจ", "geo_u1_t1"),
            ("ุงุฎุชุจุงุฑ ุงููุณุจ ุงููุซูุซูุฉ 1", "geo_u1_t2"),
            ("ุงุฎุชุจุงุฑ ุงููุณุจ ุงููุซูุซูุฉ 2", "geo_u1_t3"),
            ("ุงุฎุชุจุงุฑ ุงููุณุจ ุงููุซูุซูุฉ 3", "geo_u1_t4"),
            ("ุงุฎุชุจุงุฑ ุงููุณุจ ุงููุซูุซูุฉ 4", "geo_u1_t5"),
        ],
        "ุงููุญุฏุฉ ุงูุซุงููุฉ": [
            ("ุงุฎุชุจุงุฑ ูุจุฑููุฉ ุงููุณุจ ุงูุซูุงุซ", "geo_u2_t1"),
            ("ุงุฎุชุจุงุฑ ูุจุฑููุฉ ุนูุณ ุงููุณุจ ุงูุซูุงุซ", "geo_u2_t2"),
            ("ุงุฎุชุจุงุฑ ุงูุชุดุงุจู", "geo_u2_t3"),
        ],
        "ุงููุญุฏุฉ ุงูุซุงูุซุฉ": [
            ("ุงุฎุชุจุงุฑ ุฒูุงูุง ุงูุฏุงุฆุฑุฉ", "geo_u3_t1"),
            ("ุงุฎุชุจุงุฑ ุงูุฑุจุงุนู ุงูุฏุงุฆุฑู", "geo_u3_t2"),
            ("ุงุฎุชุจุงุฑ ุงููุถูุนุงุช ุงูููุชุธูุฉ", "geo_u3_t3"),
        ],
        "ุงููุญุฏุฉ ุงูุฑุงุจุนุฉ": [
            ("ุงุฎุชุจุงุฑ ุงูููุนุจ", "geo_u4_t1"),
            ("ุงุฎุชุจุงุฑ ูุชูุงุฒู ุงููุณุชุทููุงุช", "geo_u4_t2"),
            ("ุงุฎุชุจุงุฑ ุงูุงุณุทูุงูุฉ ูุงููุฎุฑูุท ุงูุฏูุฑุงูู", "geo_u4_t3"),
            ("ุงุฎุชุจุงุฑ ุงููุฑู", "geo_u4_t4"),
            ("ุงุฎุชุจุงุฑ ุงููุฑุฉ ูุงููุฌุณู ุงููุฑูู", "geo_u4_t5"),
        ],
    },
    "ุงูุฌุจุฑ": {
        "ุงููุญุฏุฉ ุงูุฃููู": [
            ("ุงุฎุชุจุงุฑ ุทุจูุนุฉ ุงูุงุนุฏุงุฏ", "alg_u1_t1"),
            ("ุงุฎุชุจุงุฑ ุงูููุงุณู ุงููุดุชุฑูุฉ ูุนุฏุฏูู ุตุญูุญูู", "alg_u1_t2"),
            ("ุงุฎุชุจุงุฑ ุงููุณูุฑ ุงููุฎุชุฒูุฉ", "alg_u1_t3"),
            ("ุงุฎุชุจุงุฑ ุงูุฌุฐุฑ ุงูุชุฑุจูุนู ูุนุฏุฏ ููุฌุจ", "alg_u1_t4"),
        ],
        "ุงููุญุฏุฉ ุงูุซุงููุฉ": [
            ("ุงุฎุชุจุงุฑ ููู ุนุฏุฏ ุนุงุฏู", "alg_u2_t1"),
            ("ุงุฎุชุจุงุฑ ุงููุดุฑ", "alg_u2_t2"),
            ("ุงุฎุชุจุงุฑ ุงูุชุญููู", "alg_u2_t3"),
        ],
        "ุงููุญุฏุฉ ุงูุซุงูุซุฉ": [
            ("ุงุฎุชุจุงุฑ ุฎุงุตุฉ ุงูุฌุฏุงุก ุงูุตูุฑู", "alg_u3_t1"),
            ("ุงุฎุชุจุงุฑ ูุนุงุฏูุงุช ุงูุฏุฑุฌุฉ ุงูุฃููู", "alg_u3_t2"),
            ("ุงุฎุชุจุงุฑ ูุชุฑุงุฌุญุงุช ุงูุฏุฑุฌุฉ ุงูุฃููู", "alg_u3_t3"),
        ],
        "ุงููุญุฏุฉ ุงูุฑุงุจุนุฉ": [
            ("ุงุฎุชุจุงุฑ ูุนุงุฏูุฉ ูุณุชููู", "alg_u4_t1"),
            ("ุงุฎุชุจุงุฑ ุฌููุฉ ูุนุงุฏูุชูู ุฎุทูุชูู ุจูุฌููููู", "alg_u4_t2"),
            ("ุงุฎุชุจุงุฑ ุญู ุฌููุฉ ูุนุงุฏูุชูู ุฎุทูุชูู ุจูุงููุง", "alg_u4_t3"),
        ],
        "ุงููุญุฏุฉ ุงูุฎุงูุณุฉ": [
            ("ุงุฎุชุจุงุฑ ุงูุชุงุจุน ุจุงูุตูุบุฉ ุงูุฌุจุฑูุฉ", "alg_u5_t1"),
            ("ุงุฎุชุจุงุฑ ุงูุชุงุจุน ุจุงูุตูุบุฉ ุงูุจูุงููุฉ", "alg_u5_t2"),
            ("ุงุฎุชุจุงุฑ ุงูุชุงุจุน ูุชุนุฑููู ุจุงูุฌุฏูู", "alg_u5_t3"),
        ],
        "ุงููุญุฏุฉ ุงูุณุงุฏุณุฉ": [
            ("ุงุฎุชุจุงุฑ ุงูุชุฌุฑุจุฉ ุงูุนุดูุงุฆูุฉ", "alg_u6_t1"),
            ("ุงุฎุชุจุงุฑ ุงูุชุฌุฑุจุฉ ุงูุนุดูุงุฆูุฉ ุงููุฑูุจุฉ", "alg_u6_t2"),
            ("ุงุฎุชุจุงุฑ ุงูุฑุจูุนุงุช", "alg_u6_t3"),
        ],
    },
}

# ------------------ ูุธุงุฆู ูุณุงุนุฏุฉ ููุชุนุงูู ูุน GitHub ------------------
def fetch_status_from_github():
    """
    ุญุงูู ุฃููุงู ูุฑุงุกุฉ ุงูููู ูู raw URL (ุฃูุถู ููุฃุฏุงุก ุฅุฐุง ุงููุณุชูุฏุน ุนุงู).
    ุฅุฐุง ูุดู ุฃู ูุงู ุงููุณุชูุฏุน ุฎุงุตุงูุ ุงุณุชุฎุฏู GitHub API ูุน GH_TOKEN ูุงุณุชุฑุฌุงุน ุงููุญุชูู.
    ุชุฑุฌุน dict ุฎุฑูุทุฉ ุงูุญุงูุงุช ุฃู {} ุนูุฏ ุงููุดู.
    """
    # ูุญุงููุฉ ูุฑุงุกุฉ raw (ุณุฑูุนุฉ ูุณููุฉ ูููุณุชูุฏุน ุงูุนุงู)
    try:
        r = requests.get(GH_RAW_URL, timeout=6)
        if r.status_code == 200:
            return r.json()
    except Exception:
        pass

    # ุฅุฐุง ูู ุชูุฌุญ raw ุฃู ุงููุณุชูุฏุน ุฎุงุตุ ุงุณุชุฎุฏู API ูุน Authorization (ูุชุทูุจ GH_TOKEN)
    if not GH_TOKEN:
        print("WARN: GH_TOKEN not provided and raw fetch failed; returning empty status", file=sys.stderr)
        return {}

    try:
        api_url = f"https://api.github.com/repos/{GH_REPO}/contents/{GH_FILE_PATH}?ref={GH_BRANCH}"
        headers = {"Authorization": f"token {GH_TOKEN}", "Accept": "application/vnd.github.v3+json"}
        r = requests.get(api_url, headers=headers, timeout=6)
        if r.status_code == 200:
            j = r.json()
            content_b64 = j.get("content", "")
            if content_b64:
                decoded = base64.b64decode(content_b64).decode("utf-8")
                return json.loads(decoded)
    except Exception as e:
        print("ERROR fetching status via GitHub API:", e, file=sys.stderr)

    return {}

def upload_status_to_github(status_dict):
    """
    ูุญุฏูุซ ุงูููู ูู GitHub ุนุจุฑ API (ูุชุทูุจ GH_TOKEN).
    ุชูุฑุณู ุงููุณุฎุฉ ุงูุฌุฏูุฏุฉ ููุท ุนูุฏูุง ูุถุบุท ุฒุฑ ุชุจุฏูู.
    """
    if not GH_TOKEN:
        print("ERROR: GH_TOKEN not set; cannot upload to GitHub", file=sys.stderr)
        return False

    try:
        api_url = f"https://api.github.com/repos/{GH_REPO}/contents/{GH_FILE_PATH}"
        headers = {"Authorization": f"token {GH_TOKEN}", "Accept": "application/vnd.github.v3+json"}

        # ุงุญุตู ุนูู SHA ุงูุญุงูู ุฅู ููุฌุฏ
        r_get = requests.get(api_url + f"?ref={GH_BRANCH}", headers=headers, timeout=6)
        sha = None
        if r_get.status_code == 200:
            sha = r_get.json().get("sha")

        content_str = json.dumps(status_dict, ensure_ascii=False, indent=2)
        content_b64 = base64.b64encode(content_str.encode("utf-8")).decode("utf-8")

        data = {
            "message": "ุชุญุฏูุซ ุญุงูุฉ ุงูุงุฎุชุจุงุฑุงุช ูู ุจูุช ุงูุฅุฏุงุฑุฉ",
            "content": content_b64,
            "branch": GH_BRANCH,
        }
        if sha:
            data["sha"] = sha

        r_put = requests.put(api_url, headers=headers, json=data, timeout=10)
        if r_put.status_code in (200, 201):
            return True
        else:
            print("ERROR uploading to GitHub:", r_put.status_code, r_put.text, file=sys.stderr)
    except Exception as e:
        print("ERROR uploading to GitHub exception:", e, file=sys.stderr)
    return False

# ------------------ ุจูุงุก ููุญุฉ ุงูุชุญูู ุฏููุงููููุงู ------------------
def build_dashboard_markup(status_map):
    """
    ุชุจูู InlineKeyboardMarkup ุดุฌุฑู ุญุณุจ QUIZ_TREE ูุญุงูุฉ ูู ุงุฎุชุจุงุฑ ูู status_map.
    ุฒุฑ ูู ุงุฎุชุจุงุฑ ูุธูุฑ ูุน ุชุณููุฉ ุงูุงุณู ูุฒุฑ ุฌุงูุจู ูุนุฑุถ on/off ูุงูุชุจุฏูู.
    ุณูุนุฑุถ ุตููู: [ุงุฎุชุจุงุฑ][ุฒุฑ ุชุจุฏูู]
    """
    keyboard = []
    for category, units in QUIZ_TREE.items():
        # ุฅุธูุงุฑ ุงุณู ุงููุฆุฉ ููุงุตู (ุบูุฑ ูุงุจู ููุถุบุท)
        keyboard.append([InlineKeyboardButton(f"--- {category} ---", callback_data="noop")])
        for unit_name, tests in units.items():
            # ุณุทุฑ ููุถุญ ุงุณู ุงููุญุฏุฉ
            keyboard.append([InlineKeyboardButton(f"{unit_name}", callback_data="noop")])
            for title, key in tests:
                status = status_map.get(key, "on")
                toggle_label = "๐ด off" if status == "off" else "๐ข on"
                # ุงู callback ูุฒุฑ ุงูุชุจุฏูู ูุญูู ุงูุชุนูููุฉ toggle_key:<key>
                keyboard.append([
                    InlineKeyboardButton(title, callback_data="noop"),
                    InlineKeyboardButton(toggle_label, callback_data=f"toggle:{key}")
                ])
        # ูุฑุงุบ ุจุนุฏ ุงููุฆุฉ
        keyboard.append([InlineKeyboardButton(" ", callback_data="noop")])
    # ุฒุฑ ูุชุญุฏูุซ ุงูููุญุฉ ูุฏููุงู
    keyboard.append([InlineKeyboardButton("ุชุญุฏูุซ", callback_data="refresh")])
    return InlineKeyboardMarkup(keyboard)

# ------------------ Handlers ------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ุนูุฏ /start ูุจูู ุงูููุญุฉ ุจูุงุกู ุนูู ุงูุญุงูุฉ ุงูุญุงููุฉ ูู GitHub (ูุง ูุบููุฑ ุงูููู ููุง)
    status_map = fetch_status_from_github()
    markup = build_dashboard_markup(status_map)
    await update.message.reply_text("ููุญุฉ ุชุญูู ุงูุงุฎุชุจุงุฑุงุช (ุงุถุบุท ุนูู ุฒุฑ ุงูุญุงูุฉ ูุชุจุฏูููุง):", reply_markup=markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""

    if data == "noop":
        return

    if data == "refresh":
        status_map = fetch_status_from_github()
        await query.edit_message_reply_markup(reply_markup=build_dashboard_markup(status_map))
        return

    if data.startswith("toggle:"):
        key = data.split(":", 1)[1]
        # ุงูุฑุฃ ุงูุญุงูุฉ ุงูุญุงููุฉ ูู GitHub
        status_map = fetch_status_from_github()
        current = status_map.get(key, "on")
        new = "off" if current == "on" else "on"
        status_map[key] = new
        # ุงุฑูุน ุงูุชุบููุฑ ุฅูู GitHub
        ok = upload_status_to_github(status_map)
        if ok:
            # ุญุฏุซ ููุญุฉ ุงูุชุญูู ุจุนุฏ ุงููุฌุงุญ
            await query.edit_message_reply_markup(reply_markup=build_dashboard_markup(status_map))
            await query.reply_text(f"ุชู ุชุญุฏูุซ ุญุงูุฉ {key} โ {new}")
        else:
         await query.message.reply_text("ูุดู ุชุญุฏูุซ ุงูุญุงูุฉ ุนูู GitHub. ุชุญูู ูู ุฅุนุฏุงุฏุงุช GH_TOKEN ู GH_REPO.")  

# ------------------ ุชุณุฌูู ุงููุนุงูุฌุงุช ูุชุดุบูู ุงูุจูุช ------------------
app = Application.builder().token(TOKEN).build()
app.add_handler(CommandHandler("start", cmd_start))
app.add_handler(CallbackQueryHandler(handle_callback))

if __name__ == "__main__":
    print("ุจูุช ุงูุฅุฏุงุฑุฉ ูุนูู. ุณููุฑุฃ ูููุชุจ ุฅูู:", GH_REPO, GH_FILE_PATH)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TOKEN,
        webhook_url=WEBHOOK_URL,
    )



